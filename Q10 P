#include <iostream>
#include <cmath>

// Base class Shape
class Shape {
public:
    // Virtual function area
    virtual double area() const = 0;
};

// Derived class Rectangle
class Rectangle : public Shape {
private:
    double length;
    double width;
public:
    // Constructor
    Rectangle(double l, double w) : length(l), width(w) {}

    // Implementing area for Rectangle
    double area() const override {
        return length * width;
    }
};

// Derived class Circle
class Circle : public Shape {
private:
    double radius;
public:
    // Constructor
    Circle(double r) : radius(r) {}

    // Implementing area for Circle
    double area() const override {
        return M_PI * radius * radius; // Using M_PI constant from cmath for pi
    }
};

int main() {
    // Creating instances of Rectangle and Circle
    Rectangle rectangle(5, 3);
    Circle circle(4);

    // Calling area for Rectangle and Circle
    std::cout << "Area of Rectangle: " << rectangle.area() << std::endl;
    std::cout << "Area of Circle: " << circle.area() << std::endl;

    return 0;
}
